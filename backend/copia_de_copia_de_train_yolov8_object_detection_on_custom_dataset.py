# -*- coding: utf-8 -*-
"""Copia de Copia de train-yolov8-object-detection-on-custom-dataset.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1qaC0odQXFw774yTI7KlUtg-Dg5mQuo6h

## Before you start

Let's make sure that we have access to GPU. We can use `nvidia-smi` command to do that. In case of any problems navigate to `Edit` -> `Notebook settings` -> `Hardware accelerator`, set it to `GPU`, and then click `Save`.
"""

!nvidia-smi

import os
import json
HOME = os.getcwd()
print(HOME)

# Pip install method (recommended)

!pip install ultralytics

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()

from ultralytics import YOLO

from IPython.display import display, Image

# Commented out IPython magic to ensure Python compatibility.
!mkdir -p {HOME}/datasets
# %cd {HOME}/datasets

!pip install roboflow==1.1.48 --quiet

# !pip install roboflow

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="rUbMldeZDFnHqBMaEUag")
project = rf.workspace("yolotest1-kvgfk").project("detection_v1")
version = project.version(1)
dataset = version.download("yolov8")

"""## Custom Training"""

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}

!yolo task=detect mode=train model=yolov8s.pt data={dataset.location}/data.yaml epochs=25 imgsz=800 plots=True

from IPython.display import Image, display
display(Image(filename='runs/detect/train/results.png'))  # curva de p√©rdidas y m√©tricas
display(Image(filename='runs/detect/train/confusion_matrix.png'))  # matriz de confusi√≥n

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/confusion_matrix.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/results.png', width=600)

# Commented out IPython magic to ensure Python compatibility.
# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/val_batch0_pred.jpg', width=600)

import zipfile

zip_path = "images.zip"  # Aseg√∫rate de que el archivo est√© en el directorio correcto
extract_to = "inference_images"

with zipfile.ZipFile(zip_path, 'r') as zip_ref:
    zip_ref.extractall(extract_to)

from ultralytics import YOLO

model = YOLO("runs/detect/train/weights/best.pt")
import os

image_folder = "inference_images"
results = model.predict(source="inference_images/Test", save=True, conf=0.25)  # `save=True` guarda las im√°genes con predicciones

for result in results:
    print(f"\nüì∑ Imagen: {result.path}")
    for box in result.boxes:
        xyxy = box.xyxy[0].tolist()  # Coordenadas (x1, y1, x2, y2)
        conf = box.conf[0].item()    # Confianza
        cls = box.cls[0].item()      # ID de
        class_name = model.names[cls]

        print(f"Clase: {int(cls)}, Nombre:{class_name}, Confianza: {conf:.2f}, BBox: {xyxy}")

zimport json

all_predictions = []

for result in results:
    image_results = {
        "image": os.path.basename(result.path),
        "predictions": []
    }
    for box in result.boxes:
        bbox = box.xyxy[0].tolist()
        conf = box.conf[0].item()
        cls = int(box.cls[0].item())
        class_name = model.names[cls]  # Obtener el nombre de clase

        image_results["predictions"].append({
            "class_id": cls,
            "class_name": class_name,
            "confidence": round(conf, 3),
            "bbox": bbox
        })
    all_predictions.append(image_results)

# Guardar en archivo JSON
with open("predictions.json", "w") as f:
    json.dump(all_predictions, f, indent=4)

"""## Inference with Custom Model

**NOTE:** Let's take a look at few results.
"""

project.version(dataset.version).deploy(model_type="yolov8", model_path=f"{HOME}/runs/detect/train/")

"""Follow the links above to check if the upload succeeded. It may take a couple of minutes until the model is visible to the `roboflow` SDK."""

from IPython.display import Image, display

# Ruta de la imagen
image_path = '/content/runs/detect/predict/20250516_215054(1).jpg'

# Mostrar la imagen
display(Image(filename=image_path))

import matplotlib.pyplot as plt
import matplotlib.image as mpimg

# Cargar la imagen
img = mpimg.imread('/content/runs/detect/predict/20250516_215054(1).jpg')

# Coordenadas del punto
x = 698
y = 1447

# Mostrar la imagen con el punto
plt.figure(figsize=(10, 8))
plt.imshow(img)
plt.scatter(x, y, color='red', s=60, label=f'Punto ({x}, {y})')  # punto rojo
plt.title("Imagen con ejes de p√≠xeles y punto marcado")
plt.xlabel("Eje X (ancho)")
plt.ylabel("Eje Y (alto)")
plt.legend()
plt.grid(False)
üì∑ Imagen: /content/inference_images/Test/20250516_215054(1).jpg

import csv
import pandas as pd

df = pd.read_csv('NUEVO_CSV.csv', encoding='latin-1')

df.head()

# Convertir a estructura de posiciones esperadas
esperado = {(row['Charola'], row['Posicion en Charola']): row['Nombre'] for idx, row in df.iterrows()}
esperado

from ultralytics import YOLO

model = YOLO('yolov8s.pt')
results = model('/content/runs/detect/predict/IMG_0077.jpg')


# Extraer detecciones
for box in results.boxes:
    clase = model.names[int(box.cls)]
    x1, y1, x2, y2 = map(int, box.xyxy[0])
    print(clase, x1, y1, x2, y2)

from ultralytics import YOLO
import cv2
import matplotlib.pyplot as plt

# Cargar el modelo (tu modelo entrenado, o yolov8n.pt por ejemplo)
model = YOLO('/content/runs/detect/train/weights/best.pt')  # o yolov8s.pt si no has personalizado

# Leer la imagen
img_path = '/content/runs/detect/predict/20250516_215054(1).jpg'
image = cv2.imread(img_path)

# Inference
results = model(image)[0]  # ‚Üê esto te da acceso al primer resultado

# Ahora s√≠ puedes acceder a las detecciones
for box in results.boxes:
    clase = model.names[int(box.cls)]
    x1, y1, x2, y2 = map(int, box.xyxy[0])
    print(f'{clase}: ({x1}, {y1}), ({x2}, {y2})')

# Commented out IPython magic to ensure Python compatibility.
!nvidia-smi
import os
import json
HOME = os.getcwd()
print(HOME)
# Pip install method (recommended)

!pip install ultralytics

from IPython import display
display.clear_output()

import ultralytics
ultralytics.checks()
from ultralytics import YOLO

from IPython.display import display, Image
!mkdir -p {HOME}/datasets
# %cd {HOME}/datasets

!pip install roboflow==1.1.48 --quiet

# !pip install roboflow

!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="rUbMldeZDFnHqBMaEUag")
project = rf.workspace("yolotest1-kvgfk").project("detection_v1")
version = project.version(1)
dataset = version.download("yolov8")


# %cd {HOME}

!yolo task=detect mode=train model=yolov8s.pt data={dataset.location}/data.yaml epochs=25 imgsz=800 plots=True

from IPython.display import Image, display
display(Image(filename='runs/detect/train/results.png'))  # curva de p√©rdidas y m√©tricas
display(Image(filename='runs/detect/train/confusion_matrix.png'))  # matriz de confusi√≥n

# %cd {HOME}
Image(filename=f'{HOME}/runs/detect/train/val_batch0_pred.jpg', width=600)